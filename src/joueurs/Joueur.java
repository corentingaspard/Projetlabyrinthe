package joueurs;

import composants.Objet;
import partie.ElementsPartie;

/**
 * 
 * Cette classe abstraite repr√©sente un joueur du jeu. Ce joueur peut √™tre un joueur humain ou un joueur ordinateur.
 * 
 *
 */
public abstract class Joueur {
	
	private int numJoueur; // le num√©ro du jouer
	private String nomJoueur; // Le nom du joueur
	private int numeroImagePersonnage; // Le num√©ro de l'image repr√©sentant le joueur
	private Objet objetsJoueur[]; // Les objets qui sont attribu√©s au joueur et qui devront √™tre r√©cup√©r√©s dans l'ordre
	private int nombreObjetsRecuperes; // le nombre d'objets r√©cup√©r√©s
	private int posLigne; // La ligne correspondant √  la position du joueur sur le plateau
	private int posColonne; // La colonne correspondant √  la position du joueur sur le plateau

	/**
	 * A Faire (21/05/2021 CG a verifier)
	 * 
	 * Constructeur permettant de cr√©er un joueur √  partir de son nom, son type et 
	 * le num√©ro de l'image le repr√©sentant. La position du joueur sur le plateau doit √™tre
	 * √©galement indiqu√©e. Aucun objet n'est attribu√© au joueur (l'attribut objetsJoueur vaudra null apr√®s la construction du joueur).
	 * 
	 * @param numJoueur Le num√©ro du joueur.
	 * @param nomJoueur Le nom du joueur.
	 * @param numeroImagePersonnage Le num√©ro de l'image repr√©sentant le joueur.
	 * @param posLignePlateau La ligne du plateau sur laquelle est positionn√©e le joueur.
	 * @param posColonnePlateau La colonne du plateau sur laquelle est positionn√©s le joueur.
	 */
	public Joueur(int numJoueur,String nomJoueur, int numeroImagePersonnage,int posLignePlateau,int posColonnePlateau) {
		this.numJoueur = numJoueur;
		this.nomJoueur = nomJoueur;
		this.numeroImagePersonnage = numeroImagePersonnage;
		this.posLigne = posLignePlateau;
		this.posColonne = posColonnePlateau;
	}

	/**
	 * 
	 * M√©thode permettant de cr√©er des joueurs √  partir de param√®tres obtenus √  partir des fen√™tres de param√©trages.
	 * Les joueurs sont positionn√©s dans les diff√©rents coins du plateau en fonction de leur rang 
	 * (le premier au coin en haut √  gauche, le deuxi√®me au coin en haut √  droite, le troisi√®me en bas √  droite).
	 * Le joueur de num√©ro 0 est le premier √©l√©ment du tableau retourn√©, le joueur de num√©ro 1 est le deuxi√®me √©l√©ment du tableau retourn√© et
	 * l'√©ventuel joueur de num√©ro 2 est l'√©ventuel troisi√®me √©l√©ment du tableau retourn√©. 
	 * 
	 * @param parametresJeu Les param√®tres du jeu.
	 * @return Un tableau de joueurs initialis√©s.
	 */
	public static Joueur[] nouveauxJoueurs(Object parametresJeu[]){
		int nombreJoueurs=((Integer)parametresJeu[0]).intValue();
		Joueur joueurs[]=null;
		String nomJoueur,typeJoueur;
		int posJoueurs[][]={{0,0},{0,6},{6,6}};
		int numImageJoueur;
		joueurs=new Joueur[nombreJoueurs];
		for (int i=0;i<nombreJoueurs;i++){
			nomJoueur=(String)parametresJeu[1+(3*i)];
			typeJoueur=(String)parametresJeu[2+(3*i)];
			numImageJoueur=((Integer)parametresJeu[3+(3*i)]).intValue();
			if (typeJoueur.equals("Humain")) 
				joueurs[i]=new JoueurHumain(i,nomJoueur,numImageJoueur,posJoueurs[i][0],posJoueurs[i][1]);
			else if (typeJoueur.equals("OrdiType0")) 
				joueurs[i]=new JoueurOrdinateurT0(i,nomJoueur,numImageJoueur,posJoueurs[i][0],posJoueurs[i][1]);
			else if (typeJoueur.equals("OrdiType1")) 
				joueurs[i]=new JoueurOrdinateurT1(i,nomJoueur,numImageJoueur,posJoueurs[i][0],posJoueurs[i][1]);
			else if (typeJoueur.equals("OrdiType2")) 
				joueurs[i]=new JoueurOrdinateurT2(i,nomJoueur,numImageJoueur,posJoueurs[i][0],posJoueurs[i][1]);
			else if (typeJoueur.equals("OrdiType3")) 
				joueurs[i]=new JoueurOrdinateurT3(i,nomJoueur,numImageJoueur,posJoueurs[i][0],posJoueurs[i][1]);
			else {
				System.err.println("Type de joueur non g√©r√© : "+typeJoueur+" cr√©ation d'un joueur du type par d√©faut (Humain) ...");
				joueurs[i]=new JoueurHumain(i,nomJoueur,numImageJoueur,posJoueurs[i][0],posJoueurs[i][1]);
			}
		}
		return joueurs;
	}

	/**
	 * 
	 * A Faire (21/05/2021 CG fini)
	 *  
	 * M√©thode retournant le nombre d'objets r√©cup√©r√©s par le joueur.
	 * 
	 * @return Le nombre d'objets r√©cup√©r√©s par le joueur.
	 */
	public int getNombreObjetsRecuperes() {
		return nombreObjetsRecuperes; // A Modifier
	}


	/**
	 * A Faire (21/05/2021 CG fini)
	 *  
	 * M√©thode retournant la ligne du plateau sur laquelle se trouve le joueur.
	 * @return  La ligne du plateau sur laquelle se trouve le joueur.
	 */
	public int getPosLigne() {
		return posLigne; // A Modifier
	}


	/**
	 * A Faire (21/05/2021 CG fini)
	 * 
	 * M√©thode retournant la colonne du plateau sur laquelle se trouve le joueur.
	 * @return La colonne du plateau sur laquelle se trouve le joueur.
	 */
	public int getPosColonne() {
		return posColonne; // A Modifier
	}


	/**
	 * A Faire (21/05/2021 CG fini)
	 * 
	 * M√©thode retournant le nom du joueur.
	 * @return Le nom du joueur.
	 */
	public String getNomJoueur() {
		return nomJoueur; // A Modifier
	}

	/**
	 * A Faire (21/05/2021 CG fini)
	 * 
	 * M√©thode retournant le num√©ro de l'image repr√©sentant le joueur.
	 * @return Le num√©ro de l'image repr√©sentant le joueur.
	 */
	public int getNumeroImagePersonnage() {
		return numeroImagePersonnage; // A Modifier
	}

	/**
	 * A Faire (21/05/2021 CG a verifier / pas terminer)
	 * 
	 * M√©thode permettant d'affecter au joueur les objets qu'il devra r√©cup√©rer durant le jeu.
	 * Attention : cette m√©thode devra cr√©er un nouveau tableau pour l'attribut this.objetsARecuperer.
	 * 
	 * @param objetsARecuperer Un tableau contenant les objets √  r√©cup√©rer dans l'ordre.
	 */
	public void setObjetsJoueur(Objet objetsARecuperer[]){
		Objet [] recupObjet = new Objet [objetsARecuperer.length];
		for (int i = 0 ; i <= objetsARecuperer.length;i++) {
			recupObjet[i] = objetsARecuperer[i];
		}
	}
	
	/**
	 * A Faire (22/05/2021 JC fini)
	 * 
	 * M√©thode retournant un nouveau tableau contenant les objets attribu√©s au joueur. Des objets √  r√©cup√©rer devront √™tre
	 * affect√©s au joueur avant tout appel de cette m√©thode (on suppose donc que l'attribut objetsJoueur est non null).
	 * 
	 * @return Un tableau d'Objet correspondant aux objets √  r√©cup√©rer du joueur.
	 */
	public Objet[] getObjetsJoueur(){
		return objetsJoueur;

	}
	
	
	/**
	 * A Faire (23/05/2021 JC Fini)
	 * 
	 * M√©thode retournant le prochain objet √  r√©cup√©rer par le joueur.
	 * Avant d'appeler cette m√©thode il est n√©cessaire de s'assurer qu'il existe encore des objets √  r√©cup√©rer.
	 * 
	 * @return Le prochain objet √  r√©cup√©rer par le joueur.
	 */
	public Objet getProchainObjet(){
		Objet resultat = null;
		if(!(nombreObjetsRecuperes >= objetsJoueur.length)) resultat = objetsJoueur[nombreObjetsRecuperes + 1];
		return resultat;
	}
	
	/**
	 * 
	 * A Faire (23/05/2021 JC Fini)
	 * 
	 * M√©thode permettant de r√©cup√©rer un nouvel objet. Cette m√©thode incr√©mente simplement de 1 le nombre d'objets qui ont √©t√© r√©cup√©r√©s.
	 */
	public void recupererObjet(){
		nombreObjetsRecuperes++;
	}
	

	/**
	 * A Faire (21/05/2021 CG fini)
	 * 
	 * M√©thode retournant le num√©ro du joueur.
	 * 
	 * @return Le num√©ro du joueur.
	 */
	public int getNumJoueur(){
		return numJoueur; // A Modifier
	}
	
	/**
	 * 
	 * A Faire (22/05/2021 TG A verifier)
	 * 
	 * M√©thode permettant le changement de position du joueur.
	 * @param posLigne La ligne de la nouvelle position.
	 * @param posColonne La colonne de la nouvelle position.
	 */
	public void setPosition(int posLigne,int posColonne) {
		this.posLigne=posLigne;
		this.posColonne=posColonne;
	}
	
	/**
	 * 
	 * M√©thode retournant un String repr√©sentant la cat√©gorie du joueur. Par d√©faut retourne
	 * le nom de la classe du joueur.
	 * @return Un String repr√©sentant la cat√©gorie du joueur.
	 */
	public String getCategorie() {
		return this.getClass().getName();
	}
	
	/**
	 * 
	 * Cette m√©thode est appel√©e lorsque le joueur doit jouer en d√©but de son tour. Il doit choisir une orientation de la pi√®ce qui est hors plateau
	 * et une entr√©e (une fl√™che) dans le plateau. Ce choix se fera √  travers l'interface graphique pour un joueur humain et par calcul pour un joueur
	 * ordinateur. Les √©l√©ments de la partie sont pass√©s en param√®tre pour qu'on joueur ordinateur puisse faire ses calculs. Dans le cas d'un joueur humain,
	 * ce param√®tre n'est pas utile.
	 * @param elementsPartie Les √©l√©ments de la partie.
	 * @return Un tableau contenant deux entiers, le premier correspond √  l'orientation choisie de la pi√®ce hors plateau (un nombre entre 0 et 3) et le second √  l'entr√©e du plateau (un nombre entre 0 et 27).
	 */
	
	abstract public int[] choisirOrientationEntree(ElementsPartie elementsPartie);
	
	
	/**
	 * 
	 * Cette m√©thode est appel√©e lorsque le joueur doit se d√©placer et donc choisir une case sur le plateau. Pour un joueur humain ce choix se fera √  l'aide
	 * de l'interface graphique tandis que pour un ordinateur elle se fera totalement par calcul. Il n'existe pas forc√©ment un chemin entre la case du joueur et la case choisie.
	 * 
	 * @param elementsPartie Les √©l√©ments de la partie.
	 * @return Un tableau contenant deux entiers, le premier correspond √  la ligne de la case choisie, le second √  la colonne de la case choisie. 
	 */
	abstract public int[] choisirCaseArrivee(ElementsPartie elementsPartie);

	
	/**
	 * 
	 * M√©thode retournant un nouveau tableau contenant les √©l√©ments du tableau objets donn√© en param√®tre qui ont m√™me num√©ro qu'un objet appartenant √  l'attribut
	 * objetsJoueur. L'ordre des √©l√©ments du tableau retourn√© doit suivre l'ordre des objets se trouvant dans objetsJoueur.
	 * 
	 * @param objets L'ensemble de tous les objets du jeu dans un ordre ind√©fini.
	 * @return Un nouveau tableau contenant les √©l√©ments du tableau objets donn√© en param√®tre qui ont m√™me num√©ro qu'un objet appartenant √  l'attribut
	 * objetsARecuperer (ordonn√© de la m√™me mani√®re que les objets attribu√©s au joueur).
	 */
	public Objet[] getObjetsJoueurGeneral(Objet objets[]){
		Objet resultat[]=new Objet[objetsJoueur.length];
		for (int i=0;i<objetsJoueur.length;i++)
			for (int j=0;j<objets.length;j++)
				if (objets[j].getNumeroObjet()==objetsJoueur[i].getNumeroObjet())
					resultat[i]=objets[j];
		return resultat;
	}
	
	/**
	 * M√©thode retournant une copie du joueur.
	 * @param objets Les objets du jeu.
	 * @return Une copie du joueur.
	 */
	public abstract Joueur copy(Objet objets[]);
	
	
}